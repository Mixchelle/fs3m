services:
  postgres:
    image: postgres:16
    container_name: fs3m_postgres_prod
    environment:
      POSTGRES_DB: fs3m
      POSTGRES_USER: fs3m_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fs3m_pass}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fs3m_user -d fs3m"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: fs3m_backend_prod
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    ports:
      - "8000:8000"
    environment:
      DB_URL: postgres://fs3m_user:${POSTGRES_PASSWORD:-fs3m_pass}@postgres:5432/fs3m
      SECRET_KEY: ${SECRET_KEY:-your_secret_key_here}
      DEBUG: "False"
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fs3m_frontend_prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: fs3m_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

networks:
  default:
    name: fs3m_net_prod

volumes:
  postgres_data_prod:

